<?php
/**
 * Created by PhpStorm.
 * User: faya
 * Date: 27/03/2019
 * Time: 17:20
 */
namespace Aimeos\Client\Html\Catalog\Detail\Categories;


class Standard
    extends \Aimeos\Client\Html\Catalog\Base
    implements \Aimeos\Client\Html\Common\Client\Factory\Iface
{
    /** client/html/catalog/detail/categories/standard/subparts
     * List of HTML sub-clients rendered within the catalog detail basic section
     *
     * The output of the frontend is composed of the code generated by the HTML
     * clients. At first, always the HTML code generated by the parent is printed, then
     * the HTML code of its sub-clients. The order of the HTML sub-clients
     * determines the order of the output of these sub-clients inside the parent
     * container. If the configured list of clients is
     *
     *  array( "subclient1", "subclient2" )
     *
     * you can easily change the order of the output by reordering the subparts:
     *
     *  client/html/catalog/detail/categories/standard/subparts = array( "subclient1", "subclient2" )
     *
     * @param array List of sub-client names
     * @since 2016.01
     * @category Developer
     */
    private $subPartPath = 'client/html/catalog/detail/categories/standard/subparts';
    private $subPartNames = [];
    private $view;
    /**
     * Returns the HTML string for insertion into the header.
     *
     * @param string $uid Unique identifier for the output if the content is placed more than once on the same page
     * @return string String including HTML tags for the header
     */
    public function getHeader( $uid = '' )
    {
        $view = $this->getView();

        $html = '';
        foreach( $this->getSubClients() as $subclient ) {
            $html .= $subclient->setView( $view )->getHeader( $uid );
        }
        $view->categoriesHeader = $html;

        /** client/html/catalog/detail/categories/standard/template-header
         * Relative path to the HTML header template of the catalog detail basic client.
         *
         * The template file contains the HTML code and processing instructions
         * to generate the HTML code that is inserted into the HTML page header
         * of the rendered page in the frontend. The configuration string is the
         * path to the template file relative to the templates directory (usually
         * in client/html/templates).
         *
         * You can overwrite the template file configuration in extensions and
         * provide alternative templates. These alternative templates should be
         * named like the default one but with the string "default" replaced by
         * an unique name. You may use the name of your project for this. If
         * you've implemented an alternative client class as well, "standard"
         * should be replaced by the name of the new class.
         *
         * @param string Relative path to the template creating code for the HTML page head
         * @since 2015.01
         * @category Developer
         * @see client/html/catalog/detail/categories/standard/template-body
         */
        $tplconf = 'client/html/catalog/detail/categories/standard/template-header';
        $default = 'catalog/detail/categories-header-standard.html';

        return $view->render( $this->config( $tplconf, $default ) );
    }
    protected function getSubClientNames()
    {
        return $this->getContext()->getConfig()->get( $this->subPartPath, $this->subPartNames );

    }

    /**
     * Returns the sub-client given by its name.
     *
     * @param string $type Name of the client type
     * @param string|null $name Name of the sub-client (Default if null)
     * @return \Aimeos\Client\Html\Iface Sub-client object
     */
    public function getSubClient($type, $name = null)
    {
        return $this->createSubClient( 'catalog/lists/categories/' . $type, $name );
    }

    /**
     * Returns the HTML code for insertion into the body.
     *
     * @param string $uid Unique identifier for the output if the content is placed more than once on the same page
     * @return string HTML code
     */
    public function getBody($uid = '')
    {
        // TODO: Implement getBody() method.

        $view = $this->getView();

        $html = '';
        foreach( $this->getSubClients() as $subclient ) {
            $html .= $subclient->setView( $view )->getBody( $uid );
        }
        $view->categoriesBody = $html;

        /** client/html/catalog/detail/categories/standard/template-body
         * Relative path to the HTML body template of the catalog lists categories client.
         *
         * The template file contains the HTML code and processing instructions
         * to generate the result shown in the body of the frontend. The
         * configuration string is the path to the template file relative
         * to the templates directory (usually in client/html/templates).
         *
         * You can overwrite the template file configuration in extensions and
         * provide alternative templates. These alternative templates should be
         * named like the default one but with the string "default" replaced by
         * an unique name. You may use the name of your project for this. If
         * you've implemented an alternative client class as well, "standard"
         * should be replaced by the name of the new class.
         *
         * @param string Relative path to the template creating code for the HTML page body
         * @since 2019.03
         * @category Developer
         * @see client/html/catalog/detail/categories/standard/template-header
         */
        $tplconf = 'client/html/catalog/detail/categories/standard/template-body';
        $default = 'catalog/detail/categories-body-standard.php';

        return $view->render( $view->config( $tplconf, $default ) );
    }

    /**
     * Sets the necessary parameter values in the view.
     *
     * @param \Aimeos\MW\View\Iface $view The view object which generates the HTML output
     * @param array &$tags Result array for the list of tags that are associated to the output
     * @param string|null &$expire Result variable for the expiration date of the output (null for no expiry)
     * @return \Aimeos\MW\View\Iface Modified view object
     */
    public function addData( \Aimeos\MW\View\Iface $view, array &$tags = array(), &$expire = null )
    {
        // use controller or manager to retrieve required data
        //$this->addMetaItem( $itemOrItemList, $expire, $tags );
        //$view->yourpartVarname = ...

        $manager = \Aimeos\MShop\Factory::createManager( $this->getContext(), 'catalog' );
        $search = $manager->createSearch();
        $tree=$manager->getTree(1,[],\Aimeos\MW\Tree\Manager\Base::LEVEL_TREE)->getNode()->getChildren();
        $view->tree = $tree;
	return $view;
    }

















    /*public function process()
    {
        $context = $this->getContext();
        $view = $this->getView();

        try
        {
            // your required code
            parent::process();
        }
        catch( \Aimeos\Client\Html\Exception $e )
        {
            $error = array( $context->getI18n()->dt( 'client/html', $e->getMessage() ) );
            $view->detailErrorList = $view->get( 'detailErrorList', array() ) + $error;
        }
        catch( \Aimeos\Controller\Frontend\Exception $e )
        {
            $error = array( $context->getI18n()->dt( 'controller/frontend', $e->getMessage() ) );
            $view->detailErrorList = $view->get( 'detailErrorList', array() ) + $error;
        }
        catch( \Aimeos\MShop\Exception $e )
        {
            $error = array( $context->getI18n()->dt( 'mshop', $e->getMessage() ) );
            $view->detailErrorList = $view->get( 'detailErrorList', array() ) + $error;
        }
        catch( Exception $e )
        {
            $context->getLogger()->log( $e->getMessage() . PHP_EOL . $e->getTraceAsString() );

            $error = array( $context->getI18n()->dt( 'client/html', 'A non-recoverable error occured' ) );
            $view->detailErrorList = $view->get( 'detailErrorList', array() ) + $error;
        }
    }*/
}
